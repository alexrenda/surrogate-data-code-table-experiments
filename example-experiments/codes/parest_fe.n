fun(at_boundary,

      if (line->at_boundary())
	{
	  const Boundary<dim> &boundary
	    = line->get_triangulation().get_boundary(line->boundary_indicator());

	  Boundary<dim>::FaceVertexNormals face_vertex_normals;
	  boundary.get_normals_at_vertices (line, face_vertex_normals);

	  const Tensor<1,2> coordinate_vector = line->vertex(1) - line->vertex(0);
	  const double      h                 = std::sqrt(coordinate_vector * coordinate_vector);
	  Tensor<1,2> coordinate_axis = coordinate_vector;
	  coordinate_axis /= h;

	  const double alpha = std::atan2(coordinate_axis[1], coordinate_axis[0]);
	  const double c = -((face_vertex_normals[0][1] * std::sin(alpha)
			      +face_vertex_normals[0][0] * std::cos(alpha)) /
			     (face_vertex_normals[0][1] * std::cos(alpha)
			      -face_vertex_normals[0][0] * std::sin(alpha)));
	  const double b = ((face_vertex_normals[1][1] * std::sin(alpha)
			      +face_vertex_normals[1][0] * std::cos(alpha)) /
			     (face_vertex_normals[1][1] * std::cos(alpha)
			      -face_vertex_normals[1][0] * std::sin(alpha)))
			   -2*c;


					   // next evaluate the so
					   // determined cubic
					   // polynomial at the points
					   // 1/3 and 2/3, first in
					   // unit coordinates
	  const Point<2> new_unit_points[2] = { Point<2>(1./3., 1./27.*(2*b+8*c)),
						  Point<2>(2./3., 4./27.*b+10./27.*c) };
					   // then transform these
					   // points to real
					   // coordinates by rotating,
					   // scaling and shifting
	  for (unsigned int i=0; i<2; ++i)
	    {
	      Point<2> real_point (std::cos(alpha) * new_unit_points[i][0]
				   - std::sin(alpha) * new_unit_points[i][1],
				   std::sin(alpha) * new_unit_points[i][0]
				   + std::cos(alpha) * new_unit_points[i][1]);
	      real_point *= h;
	      real_point += line->vertex(0);
	      a.push_back (real_point);
	    };
	}
      else
					 // not at boundary
	{
	  static const StraightBoundary<dim> straight_boundary;
	  straight_boundary.get_intermediate_points_on_line (line, line_points);
	  a.insert (a.end(), line_points.begin(), line_points.end());
	};