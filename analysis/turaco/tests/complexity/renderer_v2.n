fun (
  rimLight[4], isCelShadingEnabled[2], sunPositionBase[2],
  gamma[2], worldNormal[3], ssao[3],
  diffuseColor[4],
  diffuse[4], specular[4],
  emissionBase[3], isWater[2], isParticle[2]
) {
  sunPosition = sin(sunPositionBase[0] * pi / 180);

  sunMixFactor = 0.5 - sunPosition / 2;
  ambientCoolBase = exp(log1b([0.302, 0.451, 0.471]) * gamma[0]);
  ambientWarmBase = exp(log1b([0.765, 0.573, 0.400]) * gamma[0]);
  // ambientCoolBase = exp(gamma[0] * [-1.1973282616, -0.7962879395, -0.752897185]);
  // ambientWarmBase = exp(gamma[0] * [-0.2678794452, -0.5568695623, -0.9162907319]);

  if (0.5 > sunMixFactor) {
    ambientCool = ambientCoolBase / 2;
    ambientWarm = ambientWarmBase / 2;
  } else {
    ambientCool = ambientCoolBase * sunMixFactor;
    ambientWarm = ambientWarmBase * sunMixFactor;
  }

  if (0 > sunMixFactor) {
    skyLight = ambientCool;
    groundLight = ambientWarm;
  } else {
    if (sunMixFactor > 1) {
      skyLight = ambientWarm;
      groundLight = ambientCool;
    } else {
      skyLight = ambientCool * (1 - sunMixFactor) + ambientWarm * sunMixFactor;
      groundLight = ambientWarm * (1 - sunMixFactor) + ambientCool * sunMixFactor;
    }
  }

  worldNormalMixFactor = (1.0 + worldNormal[2]) / 2;
  ambientLight = groundLight * (1 - worldNormalMixFactor) + skyLight * worldNormalMixFactor;
  ambient = ambientLight * ssao * [diffuseColor[0], diffuseColor[1], diffuseColor[2]];

  if (0.00316228 > sunPosition) {
    emission = emissionBase * 0.1;
  } else {
    // assert: 0.00316228 < sunPosition < 1
    sunPositionPow = exp(log1b(sunPosition) * 0.4);
    emission = emissionBase * sunPositionPow;
  }

  out0rgb = [ambient[0], ambient[1], ambient[2]] + [diffuse[0], diffuse[1], diffuse[2]] + [rimLight[0], rimLight[1], rimLight[2]] + emission;

  if (isWater[0] > 0) {
    out0a = 0;
  } else {
    out0a = diffuseColor[3];
  }

  out1a = diffuseColor[3];

  if (isParticle[0] > 0) {
    out1rgb = [0,0,0];
  } else {
    out1rgb = [specular[0], specular[1], specular[2]];
  }

  out = [out0rgb[0], out0rgb[1], out0rgb[2], out0a, out1rgb[0], out1rgb[1], out1rgb[2], out1a];
  return out;
}
